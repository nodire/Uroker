package service

import (
	"fmt"
	"github.com/spf13/viper"
	"log"
	"math"
)

var (
	lessonDay                 = current.Weekday()
	clientMessageSuccessfully string
	id                        int
	subject                   string
	weekDay                   int8
	lessonBeginTime           string
	teacher                   string
	teacherSex                string
	room                      string
)

type Scheduler interface {
	Previous() Response
	Current() Response
	Next() Response
}

type Request struct {
	User string
}

type Response struct {
	Status, Result string
}

func getTeacher(teacherName, teacherSex string) (teacher string) {
	if teacherSex == "male" {
		teacher = fmt.Sprintf("üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å: %v.\n", teacherName)
	} else {
		teacher = fmt.Sprintf("üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å–Ω–∏—Ü–∞: %v.\n", teacherName)
	}
	return teacher
}

func (r Request) Previous() Response {
	sqlPrevious := "SELECT * FROM lesson_table WHERE week_day = $1 AND begin_time = $2"
	request, errSql := db(viper.GetString("DB_CONNECT")).Query(sqlPrevious, int(lessonDay), previousLesson().lessonStartTime)
	if errSql != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", errSql)
	}
	for request.Next() {
		errScan := request.Scan(&id, &subject, &weekDay, &lessonBeginTime, &teacher, &teacherSex, &room)
		if errScan != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", errScan)
		}
		clientMessageSuccessfully = fmt.Sprintf(
			"ü§ñ –ü—Ä–∏–≤–µ—Ç %v! %v-—è –ø–∞—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª. ‚õî\n\n"+
				"%v"+
				"üìö –ü—Ä–µ–¥–º–µ—Ç: %v.\n "+
				"üëâ –ö–∞–±–∏–Ω–µ—Ç: %v.\n",
			r.User, previousLesson().lessonStage,
			getTeacher(teacher, teacherSex),
			subject,
			room,
		)
		return Response{Status: "SUCCESSFULLY", Result: clientMessageSuccessfully}
	}
	return Response{Status: "ERROR", Result: "‚ùå –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}
}

func (r Request) Current() Response {
	sqlCurrent := "SELECT * FROM lesson_table WHERE week_day = $1 AND begin_time = $2"
	request, errSql := db(viper.GetString("DB_CONNECT")).Query(sqlCurrent, int(lessonDay), currentLesson().lessonStartTime)
	if errSql != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", errSql)
	}
	for request.Next() {
		errScan := request.Scan(&id, &subject, &weekDay, &lessonBeginTime, &teacher, &teacherSex, &room)
		if errScan != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", errScan)
		}
		clientMessageSuccessfully = fmt.Sprintf(
			"ü§ñ –ü—Ä–∏–≤–µ—Ç %v! –°–µ–π—á–∞—Å %v-—è –ø–∞—Ä–∞. ‚úÖ\n\n"+
				"%v"+
				"üìö –ü—Ä–µ–¥–º–µ—Ç: %v.\n "+
				"üëâ –ö–∞–±–∏–Ω–µ—Ç: %v.\n"+
				"‚è∞ –ü–∞—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: %v –º–∏–Ω—É—Ç.",
			r.User, currentLesson().lessonStage,
			getTeacher(teacher, teacherSex),
			subject,
			room,
			math.Round(lessonCountdown),
		)
		return Response{Status: "SUCCESSFULLY", Result: clientMessageSuccessfully}
	}
	return Response{Status: "ERROR", Result: "‚ùå –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π —É—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}
}

func (r Request) Next() Response {
	sqlNext := "SELECT * FROM lesson_table WHERE week_day = $1 AND begin_time = $2"
	request, errSql := db(viper.GetString("DB_CONNECT")).Query(sqlNext, int(lessonDay), nextLesson().lessonStartTime)
	if errSql != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", errSql)
	}
	for request.Next() {
		errScan := request.Scan(&id, &subject, &weekDay, &lessonBeginTime, &teacher, &teacherSex, &room)
		if errScan != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", errScan)
		}
		clientMessageSuccessfully = fmt.Sprintf(
			"ü§ñ –ü—Ä–∏–≤–µ—Ç %v! –°–ª–µ–¥—É—é—â–∏–π %v-—è –ø–∞—Ä–∞. ‚è≥\n\n"+
				"%v"+
				"üìö –ü—Ä–µ–¥–º–µ—Ç: %v.\n "+
				"üëâ –ö–∞–±–∏–Ω–µ—Ç: %v.\n"+
				"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å: %v –º–∏–Ω—É—Ç.",
			r.User, lessonStage,
			getTeacher(teacher, teacherSex),
			subject,
			room,
			math.Round(lessonCountdown),
		)
		return Response{Status: "SUCCESSFULLY", Result: clientMessageSuccessfully}
	}
	return Response{Status: "ERROR", Result: "‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏."}
}
